%!PS-Adobe-3.0
%%Title: Dijkstra.java
%%For: dmichel
%%Creator: a2ps version 4.14
%%CreationDate: Tue Oct  3 13:41:37 2017
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(import) K
( java.awt.*;) p n
(import) K
( java.math.*;) p n
() N
(class) K
( ) p
(LI) L
( { ) p
(// gerer les listes d'entiers) c n
(   ) p
(int) k
( elt; LI next;) p n
(   ) S
(static) K
(  LI cons\( ) p
(int) k
( x, LI tail\)) p n
(        { LI cell=) S
(new) K
( LI\(\); cell.elt=x; cell.next=tail; ) p
(return) K
( cell;}) p n
(   ) S
(static) K
(  ) p
(boolean) k
( isempty\( LI liste\) { ) p
(return) K
( liste==) p
(null) k
( ; }) p n
(   ) S
(static) K
(  ) p
(int) k
( head\( LI liste\) { ) p
(return) K
( liste.elt; }) p n
(   ) S
(static) K
(  LI tail\(  LI liste\) { ) p
(return) K
( liste.next; }) p n
(   ) S
(static) K
(  LI iaj\( ) p
(int) k
( i, ) p
(int) k
( j\) { ) p
(if) K
( \(i==j\) ) p
(return) K
( cons\(i, ) p
(null) k
(\); ) p
(return) K
( cons\(i) p n
(, iaj\( i+1, j\)\);}) N
(}) N
() N
(class) K
( ) p
(Pt) L
( {) p 16 T () S
(double) k
( x, y; ) p n
() S 8 T () S
(static) K
( Pt point\( ) p
(double) k
( u, ) p
(double) k
( v\) { Pt p=) p
(new) K
( Pt\(\);  p.x=u; p.y=v; ) p
(ret) K n
(urn) S
( p; }) p n
(}) N
() N
(class) K
( ) p
(LP) L
( {   ) p
(// GERER LES LISTES DE POINTS) c n
(   Pt elt; LP next;) p n
(   ) S
(static) K
(  LP cons\( Pt x, LP tail\)) p n
(        { LP cell=) S
(new) K
( LP\(\); cell.elt=x; cell.next=tail; ) p
(return) K
( cell;}) p n
(   ) S
(static) K
(  ) p
(boolean) k
( isempty\( LP liste\) { ) p
(return) K
( liste==) p
(null) k
( ; }) p n
(   ) S
(static) K
(  Pt head\( LP liste\) { ) p
(return) K
( liste.elt; }) p n
(   ) S
(static) K
(  LP tail\(  LP liste\) { ) p
(return) K
( liste.next; }) p n
(}) N
() N
(class) K
( ) p
(Arc) L
( { ) p
(int) k
( v; ) p
(double) k
( d; ) p n
() S 8 T () S
(static) K
( Arc arc\( ) p
(int) k
( sommet, ) p
(double) k
( distance\) ) p n
() S 8 T ({ Arc arc= ) S
(new) K
( Arc\(\); arc.v=sommet; arc.d=distance; ) p
(return) K
( arc;}) p n
(}) N
(class) K
( ) p
(LA) L
(  ) p
(// GERER LES LISTES D'ARCS) c n
({) p n
(   Arc elt;  LA next;) N
(   ) S
(static) K
( LA cons\( Arc x, LA tail\) { LA cell=) p
(new) K
( LA\(\); cell.elt=x; cell.next=tai) p n
(l; ) S
(return) K
( cell;}) p n
(   ) S
(static) K
( ) p
(boolean) k
( isempty\( LA liste\) { ) p
(return) K
( liste==) p
(null) k
( ; }) p n
(   ) S
(static) K
( Arc head\( LA liste\) { ) p
(return) K
( liste.elt; }) p n
(   ) S
(static) K
( LA tail\(  LA liste\) { ) p
(return) K
( liste.next; }) p n
(}) N
() N
() N
(public) K
( ) p
(class) K
( ) p
(Dijkstra) L
( ) p
(extends) K
( Frame {) p n
() S 8 T () S
(int) k
( width, height;) p n
() S 8 T (Pt [] tabpts;) N
() S 8 T (LA [] tabarcs;) N
() S 8 T () S
(double) k
( [] dist; ) p
(// distance a la source) c n
(        ) p
(int) k
( [] pred; ) p
(// tableau des predecesseurs dans le PCC de la source au so) c n
(mmet) N
() p n
(static) K
( ) p
(double) k
( square\( ) p
(double) k
( d\) { ) p
(return) K
( d*d ; }) p n
() N
() S 8 T () N
( ) S
(// rend la liste des elements de rang pair \(le premier est de rang 0 donc pair\)) c n
(   ) p
(static) K
( ) p
(public) K
( LP pairs\( LP l\)) p n
(   { ) S
(if) K
( \() p
(null) k
(==l\) ) p
(return) K
( ) p
(null) k
(;) p n
(     ) S
(if) K
( \(LP.isempty\( LP.tail\( l\)\)\) ) p
(return) K
( LP.cons\( LP.head\( l\), ) p
(null) k
(\);) p n
(     ) S
(return) K
( LP.cons\( LP.head\( l\), pairs\( LP.tail\( LP.tail\( l\)\)\)\);) p n
(   }) N
( ) S
(// rend la liste des elements de rang impair) c n
(   ) p
(static) K
( ) p
(public) K
( LP impairs\( LP l\) ) p n
() S 8 T ({ ) S
(if) K
( \(LP.isempty\(l\)\) ) p
(return) K
( ) p
(null) k
(; ) p
(return) K
( pairs\( LP.tail\(l\)\); }) p n
( ) S
(// fusion de 2 listes de points triees) c n
(   ) p
(static) K
( ) p
(public) K
( LP fusion\( LP l1, LP l2\)) p n
(   { ) S
(if) K
( \(LP.isempty\( l1\)\) ) p
(return) K
( l2;) p n
(     ) S
(if) K
( \(LP.isempty\( l2\)\) ) p
(return) K
( l1;) p n
(     Pt e1= LP.head\( l1\); Pt e2= LP.head\( l2\);) N
(     ) S
(if) K
( \(e1.x <= e2.x || \(e1.x==e2.x && e1.y <= e2.y\)\) ) p n
(Dijkstra.java) (Page 1/3) (oct. 02, 15 12:09) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(return) K
( LP.cons\( e1, fusion\( LP.tail\( l1\), l2\)\);) p n
(     ) S
(return) K
( LP.cons\( e2, fusion\( l1, LP.tail\( l2\)\)\);) p n
(   }) N
(   ) S
(static) K
( ) p
(public) K
(  LP mergesort\( LP l\)) p n
(   { ) S
(if) K
( \(LP.isempty\( l\) || LP.isempty\( LP.tail\( l\)\)\) ) p
(return) K
( l;) p n
(     ) S
(return) K
( fusion\( mergesort\( pairs\( l\)\), mergesort\( impairs\( l\)\)\);) p n
(   }) N
() N
(   ) S
(int) k
( etape\( LI ls\) ) p
(// on met a jour les voisins du sommet a distance min de la) c n
( source) N
(   { ) p 8 T () S
(if) K
(\( ) p
(null) k
( == ls\) ) p
(return) K
( \(-1\);) p n
() S 8 T () S
(int) k
( s= LI.head\( ls\);) p n
() S 8 T () S
(for) K
(\( LI li= ls; ) p
(null) k
( != li; li = LI.tail\( li\)\)) p n
() S 8 T ({) S 16 T () S
(int) k
( i= LI.head\( li\);) p n
() S 8 T () S 16 T () S
(if) K
( \( dist[i] < dist[s]\) s=i;  ) p n
() S 8 T (}) N
() S 8 T () S
(// ici s est le sommet  le plus proche de la source) c n
() p 8 T () S
(for) K
(\( LA la= tabarcs[s]; ) p
(null) k
( != la; la= LA.tail\( la\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Arc arc = LA.head\( la\); ) N
() S 8 T () S 16 T () S
(int) k
( v= arc.v; ) p
(double) k
( sv= arc.d;) p n
() S 8 T () S 16 T () S
(if) K
(\( dist[s] + sv < dist[v]\) { dist[v] = dist[s] + sv; pred[v]= s) p n
(; }) S 8 T () N
() S 8 T (}) N
() S 8 T () S
(return) K
( s;) p n
(   }) N
(   ) S
(static) K
( LI enlever\( LI ls, ) p
(int) k
( s\)) p n
(   { ) S 8 T (LI l= ) S
(null) k
(;) p n
(        ) S
(for) K
(\( ; ) p
(null) k
( != ls; ls=LI.tail\( ls\)\)) p n
() S 8 T () S 16 T () S
(if) K
(\( LI.head\( ls\) != s\) l= LI.cons\( LI.head\( ls\), l\); ) p n
() S 8 T () S
(return) K
( l;) p n
(   }) N
(        ) N
(   ) S
(void) k
( enchainer\( LI ls\)) p n
() S 8 T ({ ) S
(for) K
(\(;;\)) p n
(          {  ) S
(int) k
( s=etape\( ls\);) p n
(             ) S
(if) K
(\( -1==s\) ) p
(return) K
(;) p n
() S 8 T (     ls = enlever\( ls, s\);) N
(          }) N
() S 8 T (}) N
(   ) S
(void) k
( PCC\( ) p
(int) k
( src\) ) p
(// calcul des + courts chemins) c n
(   {) p n
() S 8 T () S
(int) k
( n = tabarcs.length;) p n
() S 8 T (dist = ) S
(new) K
( ) p
(double) k
([n]; ) p n
() S 8 T () S
(for) K
(\( ) p
(int) k
( s=0 ; s<n; s++\) dist[s]=1e10;) p n
() S 8 T (dist[ src]= 0.;) N
() S 8 T (pred= ) S
(new) K
( ) p
(int) k
([n];  ) p n
() S 8 T () S
(for) K
(\( ) p
(int) k
( s=0 ; s<n; s++\) pred[s]= -1; ) p n
() S 8 T (pred[src]= src;) N
() S 8 T (LI ls = LI.iaj\( 0, n-1\);) N
(        enchainer\( LI.iaj\( 0, n-1\)\);) N
() S 8 T () S
(// ici dist[] et pred[] sont corrects) c n
(   }) p n
(   ) S
(void) k
( generer\( ) p
(int) k
( n, ) p
(double) k
( rayon\)) p n
(   {) N
() S 8 T (System.out.println\( ") S
(ENTREE DANS generer) str
("\);) p n
() N
() S 8 T (LP l=LP.cons\( Pt.point\(0.,0.\), ) S
(null) k
(\);) p n
() S 8 T () S
(for) K
(\( ) p
(int) k
( i=1 ; i<n;  \)) p n
() S 8 T ({) S 16 T () S
(double) k
( x=  Math.random\(\);) p n
() S 8 T () S 16 T () S
(double) k
( y=  Math.random\(\);) p n
() S 8 T () S 16 T () S
(if) K
( \( 0.1 <= x && x <= 0.3 && 0.1 <= y && y <= 0.3\) ) p
(continue) K
(;) p n
() S 8 T () S 16 T () S
(if) K
( \( square\( x - 0.6\) + square\( y - 0.6\) < square \(0.25\)\) ) p
(contin) K n
(ue) S
(;) p n
() S 8 T () S 16 T (l= LP.cons\( Pt.point\( x, y\), l\); i++ ;) N
() S 8 T (}) N
() S 8 T (l= mergesort\( l\);) N
() S 8 T (tabpts = ) S
(new) K
( Pt[ n];) p n
() S 8 T () S
(for) K
( \() p
(int) k
( k=0; l != ) p
(null) k
(; l=LP.tail\(l\), k++\) tabpts[k] =  LP.head\(l\);) p n
(Dijkstra.java) (Page 2/3) (oct. 02, 15 12:09) title
border
grestore
(Printed by dmichel) rhead
(Dijkstra.java) (1/2) (mardi octobre 03, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (tabarcs= ) S
(new) K
( LA[ n]; ) p
(for) K
(\( ) p
(int) k
( i=0; i<n; i++\) tabarcs[i]=) p
(null) k
(;) p n
() S 8 T () S
(for) K
(\( ) p
(int) k
( s=0; s<n; s++\)) p n
() S 8 T ({) S 16 T () S
(double) k
( sx=tabpts[s].x; ) p
(double) k
( sy= tabpts[s].y;) p n
() S 8 T () S 16 T () S
(for) K
(\( ) p
(int) k
( t=s+1; t<n && tabpts[t].x - tabpts[s].x <= rayon; t++\) ) p n
() S 8 T () S 16 T ({) S 24 T () S
(double) k
( tx= tabpts[t].x; ) p
(double) k
( ty=tabpts[t].y;) p n
( ) S 8 T () S 16 T (        ) S
(double) k
( st = Math.sqrt\( square\( tx-sx\) + square\( ty-sy\)\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(st < rayon\) ) p n
() S 8 T () S 16 T () S 24 T ({) S 32 T (tabarcs[t]= LA.cons\( Arc.arc\( s, st\), tabarcs[t]) N
(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (tabarcs[s]= LA.cons\( Arc.arc\( t, st\), tabarcs[s]) N
(\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(// PCC\( \(int\) \(\(\(double\) \(n-1\) \) * Math.random\(\)\)\);) c n
() p 8 T (System.out.println\( ") S
(CALCUL PCC) str
("\);) p n
() S 8 T (PCC\( 0 \);) N
() S 8 T (System.out.println\( ") S
(SORTIE DE  generer) str
("\);) p n
(   }) N
() N
(   ) S
(public) K
( ) p
(void) k
( init\(\) {) p n
(      System.out.println\( ") S
(ENTREE DS INIT) str
("\);) p n
(      width = getSize\(\).width;) N
(      height = getSize\(\).height;) N
(      setBackground\( Color.white \);) N
(      System.out.println\( ") S
(SORTIE DE INIT) str
("\);) p n
(   }) N
() N
(   ) S
(void) k
( tracer_segment\( Graphics g, ) p
(int) k
( i, ) p
(int) k
( j\)) p n
(   {) N
() S 8 T () S
(double) k
( scale = \() p
(double) k
(\) \(getSize\(\).width\);) p n
() S 8 T () S
(int) k
( xi= \() p
(int) k
(\) \(scale * tabpts[i].x\); ) p
(int) k
( yi= 10 + \() p
(int) k
(\) \(scale * tabpts[) p n
(i].y\);) N
(        ) S
(int) k
( xj = \() p
(int) k
(\) \(scale * tabpts[j].x\); ) p
(int) k
( yj = 10 + \() p
(int) k
(\) \(scale * tabpt) p n
(s[j].y\);) N
(        g.drawLine\( xi, yi, xj, yj\);) N
(   }) N
(   ) S
(public) K
( ) p
(void) k
( paint\( Graphics g \) ) p n
(   {  ) N
() N
(      g.setColor\( Color.gray \);) N
(      ) S
(for) K
( \( ) p
(int) k
( i = 0; i < tabarcs.length - 1; ++i \) ) p n
(      {) N
(        ) S
(for) K
(\( LA l= tabarcs[i]; ) p
(null) k
( != l; l= LA.tail\( l\)\)) p n
() S 8 T ({ Arc arc= LA.head\( l\);) N
() S 8 T (  ) S
(int) k
( j = arc.v;) p n
(          tracer_segment\( g, i, j\);) N
() S 8 T (}) N
(      }) N
() N
(      ) S
(//g.setColor\( Color.black \);) c n
(      g.setColor\( Color.green\);) p n
(      g.setColor\( Color.red\);) N
(      ) S
(for) K
( \( ) p
(int) k
( i = 0; i < tabarcs.length - 1; ++i \)) p n
(      { ) S
(int) k
( j= pred[i]; ) p
(if) K
( \(j != -1\) tracer_segment\( g, i, j\); }) p n
() N
(   }) N
(   ) N
(public) K
( ) p
(static) K
( ) p
(void) k
( main \(String arg[]\) {) p n
(  Dijkstra f = ) S
(new) K
( Dijkstra\(\);) p n
(  f.init\(\);) N
(  f.generer\( 4000, 0.04\);) N
(  f.setBounds\(0, 0, 900, 900\);) N
(  f.setVisible\() S
(true) k
(\);) p n
( }) N
() N
(}) N
() N
(Dijkstra.java) (Page 3/3) (oct. 02, 15 12:09) title
border
grestore
(Printed by dmichel) rhead
(Dijkstra.java) (2/2) (mardi octobre 03, 2017) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
