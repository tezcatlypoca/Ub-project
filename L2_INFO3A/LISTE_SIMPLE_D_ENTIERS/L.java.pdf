%!PS-Adobe-3.0
%%Title: L.java
%%For: dmichel
%%Creator: a2ps version 4.14
%%CreationDate: Mon Sep 12 15:12:34 2016
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/*) c n
() N
($ javac L.java) N
($ java L 1000000   #echec pour un million) N
($ java -Xss20m L 1000000  #ca passe) N
(javac ne traite pas la r\303\251cursion terminale, mais scala la traite) N
(*/) N
(class) K
( ) p
(A) L
( {) p n
() S 8 T () S
(static) K
( ) p
(public) K
( A emptyA= ) p
(null) k
(;) p n
() S 8 T () S
(public) K
( ) p
(int) k
( key;) p n
() S 8 T () S
(public) K
( A filsgauche, filsdroit;) p n
() N
() S 8 T () S
(static) K
( ) p
(public) K
( A ) p 32 T (btree\( A fg, ) S
(int) k
( e, A fd\)) p n
() S 8 T ({ A noeud=) S
(new) K
( A\(\); ) p n
() S 8 T (  noeud.filsgauche= fg; noeud.filsdroit=fd; noeud.key = e; ) N
(          ) S
(return) K
( noeud; ) p n
() S 8 T (}) N
() S 8 T () S
(static) K
( ) p
(public) K
( A  ) p 32 T (left\( A n\) { ) S
(return) K
( n.filsgauche; }) p n
() S 8 T () S
(static) K
( ) p
(public) K
( A  ) p 32 T (right\( A n\) { ) S
(return) K
( n.filsdroit; }) p n
() S 8 T () S
(static) K
( ) p
(public) K
( ) p
(int) k
(   ) p 32 T (value\( A n\) { ) S
(return) K
( n.key; }) p n
() S 8 T () N
() S 8 T () S
(// insertion d'un entier dans un arbre) c n
() p 8 T () S
(static) K
( ) p
(public) K
( A   insrt\( A n, ) p
(int) k
( v\)) p n
() S 8 T ({ ) S
(if) K
( \(emptyA==n\) ) p
(return) K
( btree\( emptyA, v, emptyA\);) p n
() S 8 T (  ) S
(int) k
( e= value\( n\);) p n
() S 8 T (  ) S
(if) K
( \(v <= e\) ) p
(return) K
( btree\( insrt\( left\(n\), v\), e, right\(n\)\);) p n
() S 8 T (  ) S
(return) K
( btree\(  left\(n\), e, insrt\( right\(n\), v\)\);) p n
() S 8 T (}) N
() S 8 T () S
(// insertion d'une liste d'entiers dans un arbre) c n
() p 8 T () S
(static) K
( ) p
(public) K
( A   insrtn\( A n, L l\)) p n
() S 8 T ({ ) S
(if) K
( \( L.isempty\( l\)\) ) p
(return) K
( n;) p n
() S 8 T (  ) S
(return) K
( insrtn\( insrt\( n, L.head\( l\)\), L.tail\( l\)\);) p n
() S 8 T (}) N
() S 8 T () S
(static) K
( ) p
(public) K
( L    infix\( A n, L l\)) p n
() S 8 T ({ ) S
(if) K
(\( emptyA==n\) ) p
(return) K
( l;) p n
() S 8 T (  ) S
(return) K
( infix\( left\(n\), L.cons\( value\(n\), infix\( right\(n\), l\)\)\);) p n
() S 8 T (}) N
() S 8 T () S
(static) K
( ) p
(public) K
( L treesort\( L l\)) p n
() S 8 T ({ ) S
(return) K
( infix\( insrtn\( emptyA, l\), L.nil\); }) p n
(}) N
() N
() N
(class) K
( ) p
(Comparison) L
( { ) p
(int) k
( compare\( ) p
(int) k
( a, ) p
(int) k
( b\) { ) p
(return) K
( 0; }}) p n
(class) K
( ) p
(Croissant) L
( ) p
(extends) K
( Comparison { ) p
(int) k
( compare\( ) p
(int) k
( a, ) p
(int) k
( b\) { ) p
(return) K
( a-b;}}) p n
(class) K
( ) p
(Decroissant) L
( ) p
(extends) K
( Comparison { ) p
(int) k
( compare\( ) p
(int) k
( a, ) p
(int) k
( b\){ ) p
(return) K
( b-a;}}) p n
() N
(class) K
( ) p
(Fonction) L
( { ) p
(int) k
( eval\( ) p
(int) k
( x\) { ) p
(return) K
( x; }}) p n
(class) K
( ) p
(Fact) L
( ) p
(extends) K
( Fonction { ) p
(int) k
( eval\( ) p
(int) k
( x\) { ) p
(return) K
( L.fact\(x\); }}) p n
(class) K
( ) p
(Fib) L
( ) p
(extends) K
( Fonction { ) p
(int) k
( eval\( ) p
(int) k
( x\) { ) p
(return) K
( L.fib\(x\); }}) p n
() N
(public) K
( ) p
(class) K
( ) p
(L) L
( {) p n
(   ) S
(public) K
( ) p
(int) k
( elt;) p n
(   ) S
(public) K
( L next;) p n
(   ) S
(static) K
( ) p
(public) K
( L cons\( ) p
(int) k
( x, L tail\) ) p n
() S 8 T ({ L cell=) S
(new) K
( L\(\); cell.elt=x; cell.next=tail; ) p
(return) K
( cell;}) p n
(   ) S
(static) K
( ) p
(public) K
( L nil= ) p
(null) k
(; ) p n
(   ) S
(static) K
( ) p
(public) K
( ) p
(boolean) k
( isempty\( L liste\) { ) p
(return) K
( liste==nil ; }) p n
(   ) S
(static) K
( ) p
(public) K
( ) p
(int) k
( head\( L liste\) { ) p
(return) K
( liste.elt; }) p n
(   ) S
(static) K
( ) p
(public) K
( L tail\(  L liste\) { ) p
(return) K
( liste.next; }) p n
(   ) S
(static) K
( ) p
(int) k
( fib\( ) p
(int) k
( x\) { ) p
(if) K
( \(x < 2\) ) p
(return) K
( x; ) p
(return) K
( fib\(x-1\) + fib\(x-2\); }) p n
(   ) S
(static) K
( ) p
(public) K
( ) p
(int) k
( fact\( ) p
(int) k
( x\) { ) p
(if) K
( \(x < 2\) ) p
(return) K
( 1; ) p
(return) K
( x * fact\(x-1\); }) p n
(   ) S
(static) K
( ) p
(public) K
( L map\( Fonction f, L l\) { ) p
(if) K
( \(isempty\( l\)\) ) p
(return) K
( nil;) p n
() S 8 T () S 16 T () S
(return) K
( cons\( f.eval\( head\( l\)\), map\( f, tail\( l\)\)\); }) p n
(   ) S
(static) K
( ) p
(public) K
( L iaj\( ) p
(int) k
( i, ) p
(int) k
( j\)) p n
() S 8 T ({ ) S
(if) K
( \(i==j\) ) p
(return) K
( cons\(i, nil\);) p n
() S 8 T (  ) S
(if) K
( \(i<j\) ) p
(return) K
( cons\( i, iaj\( i+1, j\)\);) p n
(          ) S
(return) K
( cons\( i, iaj\( i-1, j\)\); }) p n
() N
(L.java) (Page 1/5) (sept. 12, 16 15:11) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// concat de 2 listes) c n
(   ) p
(static) K
( ) p
(public) K
( L concat\( L l1, L l2\)) p n
(   { ) S
(if) K
( \(isempty\( l1\) \) ) p
(return) K
( l2;) p n
(     ) S
(if) K
( \(isempty\( l2\) \) ) p
(return) K
( l1;) p n
(     ) S
(return) K
( cons\( head\( l1\), concat\( tail\( l1\), l2\)\); }) p n
() N
(// generer une liste aleatoire; ) c n
(   ) p
(static) K
( ) p
(public) K
( ) p
(int) k
( random\( ) p
(int) k
( x \) ) p
(//{ return \(311 * x\) % 1001; }) c n
(   { ) p
(return) K
( \() p
(int) k
(\) \(10000. * Math.random\(\) \); }) p n
() N
(   ) S
(static) K
( ) p
(public) K
( L lalea\( ) p
(int) k
( n\) { ) p
(if) K
( \(n==0\) ) p
(return) K
( nil; ) p
(return) K
( cons\( random\(n\),) p n
( lalea\(n-1\)\); }) N
(   ) S
(static) K
( ) p
(public) K
( L lalea2\( ) p
(int) k
( n\) { L l=nil; ) p n
() S 8 T () S
(for) K
( \() p
(int) k
( i=0; i<n; i++\) l=cons\( random\(i\), l\);) p n
() S 8 T () S
(return) K
( l; }) p n
() N
(//************************************************************************) c n
(// tri fusion) N
(//************************************************************************) N
() p n
( ) S
(// rend la liste des elements de rang pair \(le premier est de rang 0 donc pair\)) c n
( ) N
(   ) p
(static) K
( ) p
(public) K
( L pairs\( L l\)) p n
(   { ) S
(if) K
( \(isempty\(l\)\) ) p
(return) K
( nil;) p n
(     ) S
(if) K
( \(isempty\( tail\( l\)\)\) ) p
(return) K
( cons\( head\( l\), nil\);) p n
(     ) S
(return) K
( cons\( head\( l\), pairs\( tail\( tail\( l\)\)\)\);) p n
(   }) N
( ) S
(// rend la liste des elements de rang impair ) c n
(   ) p
(static) K
( ) p
(public) K
( L impairs\( L l\) { ) p
(if) K
( \(isempty\(l\)\) ) p
(return) K
( nil; ) p
(return) K
( pairs\( tai) p n
(l\(l\)\); }) N
( ) S
(// fusion de 2 listes triees) c n
(   ) p
(static) K
( ) p
(public) K
( L fusion\( L l1, L l2\)) p n
(   { ) S
(if) K
( \(isempty\( l1\)\) ) p
(return) K
( l2;) p n
(     ) S
(if) K
( \(isempty\( l2\)\) ) p
(return) K
( l1;) p n
(     ) S
(int) k
( e1= head\( l1\); ) p
(int) k
( e2= head\( l2\);) p n
(     ) S
(if) K
( \(e1 <= e2\) ) p
(return) K
( cons\( e1, fusion\( tail\( l1\), l2\)\); ) p n
(     ) S
(return) K
( cons\( e2, fusion\( l1, tail\( l2\)\)\);) p n
(   }) N
(   ) S
(static) K
( ) p
(public) K
(  L mergesort\( L l\)) p n
(   { ) S
(if) K
( \(isempty\( l\) || isempty\( tail\( l\)\)\) ) p
(return) K
( l;) p n
(     ) S
(return) K
( fusion\( mergesort\( pairs\( l\)\), mergesort\( impairs\( l\)\)\);) p n
(   }) N
() N
(//************************************************************************) c n
(   ) p
(// QUICKSORT) c n
(//************************************************************************) N
(   ) p
(// filtre les elts + petits que key dans une liste l :) c n
(/* trop de recursion pour le compilateur java...) N
(   static public L smallerthan\( L l, int key\)) N
(   { if \(isempty\( l\)\) return nil;) N
(     if \(head\( l\) < key\) return cons\( head\( l\), smallerthan\( tail\( l\), key\)\);) N
(     return smallerthan\( tail\( l\), key\); ) N
(   }) N
(*/) N
() p n
(   ) S
(static) K
( ) p
(public) K
( L smallerthan\( Comparison cmp, L l, ) p
(int) k
( key\)) p n
(   { ) S
(if) K
( \(isempty\( l\)\) ) p
(return) K
( nil;) p n
(    L r=nil;) N
(    ) S
(for) K
(\( ; ! isempty\(l\); l=tail\(l\) \)) p n
(    { ) S
(if) K
( \(cmp.compare\( head\( l\), key\) < 0\)   r = cons\( head\( l\), r\); }) p n
(    ) S
(return) K
( r;) p n
(   }) N
() N
(   ) S
(// filtre les elts + grands que key dans une liste l :) c n
(/* trop de recursion \303\240 l'ex\303\251cution pour le compilateur java...) N
(   static public L greaterthan\( L l, int key\)) N
(   { if \(isempty\( l\)\) return nil;) N
(     if \(cmp.compare\( head\( l\), key\) > 0\) //\(head\( l\) > key\) ) N
(        return cons\( head\( l\), greaterthan\( tail\( l\), key\)\);) N
(L.java) (Page 2/5) (sept. 12, 16 15:11) title
border
grestore
(Printed by dmichel) rhead
(L.java) (1/3) (lundi septembre 12, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     return greaterthan\( tail\( l\), key\); }) c n
(*/) N
(   ) p
(static) K
( ) p
(public) K
( L greaterthan\( Comparison cmp, L l, ) p
(int) k
( key\)) p n
(   { ) S
(if) K
( \(isempty\( l\)\) ) p
(return) K
( nil; ) p n
(     L r=nil;) N
(     ) S
(for) K
(\( ; ! isempty\(l\); l=tail\(l\) \)) p n
(     { ) S
(if) K
( \(cmp.compare\( head\( l\), key\) > 0\)  r = cons\( head\( l\), r\); }) p n
(     ) S
(return) K
( r;) p n
(   }) N
() N
(   ) S
(// filtre les elts equal to key dans une liste l :) c n
(/* trop de recursion \303\240 l'ex\303\251cution pour le compilateur java...) N
(   static public L equalto\( L l, int key\)) N
(   { if \(isempty\( l\)\) return nil;) N
(     if \(head\( l\) == key\) return cons\( head\( l\), equalto\( tail\( l\), key\)\);) N
(     return equalto\( tail\( l\), key\); }) N
(*/) S
( ) p n
(   ) S
(static) K
( ) p
(public) K
( L equalto\( Comparison cmp, L l, ) p
(int) k
( key\)) p n
(   { ) S
(if) K
( \(isempty\( l\)\) ) p
(return) K
( nil;) p n
(     L r=nil;) N
(     ) S
(for) K
(\( ; ! isempty\(l\); l=tail\(l\) \)) p n
(     { ) S
(if) K
( \(cmp.compare\( head\( l\), key\)==0\) r = cons\( head\( l\), r\); }) p n
(     ) S
(return) K
( r;) p n
(   }) N
(   ) S
(static) K
( ) p
(public) K
( L quicksort\( Comparison cmp,  L l\)) p n
(   {  ) S
(if) K
( \(isempty\( l\) || isempty\( tail\( l\)\)\) ) p
(return) K
( l; ) p n
(      ) S
(int) k
( key = head\( l\); L tl= tail\( l\);) p n
(      ) S
(return) K
( concat\( quicksort\( cmp, smallerthan\( cmp, tl, key\)\),) p n
(                     concat\( equalto\( cmp, l, key\), ) N
(                             quicksort\( cmp, greaterthan\( cmp, tl, key\)\)\)\);) N
(   }) N
() S 8 T () N
(// *********************************************************************) c n
(   ) p
(// TRI NAIF) c n
(// *********************************************************************) N
(   ) p
(static) K
( ) p
(int) k
( min\( ) p
(int) k
( a, ) p
(int) k
( b\) { ) p
(if) K
( \(a<=b\) ) p
(return) K
( a; ) p
(return) K
( b; }) p n
(   ) S
(// minimm d'une liste :) c n
(/* trop de recursion ...) N
(   static public int minimum\( L l, int sivide\)) N
(   { if \( isempty\( l\)\) return sivide;) N
(     return minimum\( tail\( l\), min\( head\( l\), sivide\)\);) N
(   }) N
(*/) N
(   ) p
(static) K
( ) p
(public) K
( ) p
(int) k
( minimum\( L l, ) p
(int) k
( sivide\)) p n
(   { ) S
(if) K
( \( isempty\( l\)\) ) p
(return) K
( sivide;) p n
(     ) S
(int) k
( smallest=head\(l\);) p n
(     ) S
(for) K
(\( ; ! isempty\( l\); l=tail\( l\)\)) p n
(       ) S
(if) K
( \(smallest > head\(l\)\) smallest=head\(l\);) p n
(     ) S
(return) K
( smallest;) p n
(   }) N
(/* trop de recursion ...  ) c n
(   static public L remove\( L l, int key\)) N
(   { if \( isempty\( l\)\) return l;) N
(     if \(key == head\( l\)\) return tail\( l\);) N
(     return cons\( head\( l\), remove\( tail\( l\), key\)\); }) N
(*/) N
(   ) p
(static) K
( ) p
(public) K
( L remove\( L l, ) p
(int) k
( key\)) p n
(   { L r=nil;) N
(     ) S
(for) K
(\( ; ! isempty\(l\); l=tail\(l\)\)) p n
(     {   ) S
(if) K
( \(key==head\( l\)\) ) p
(return) K
( concat\( r, tail\(l\)\);) p n
(         ) S
(else) K
( r= cons\( head\( l\), r\);) p n
(     }) N
(     ) S
(return) K
( r; ) p n
(   }) N
(   ) S
(static) K
( ) p
(public) K
( L slowsort\( L l\)) p n
(   {) N
() S 8 T () S
(if) K
( \( isempty\( l\) || isempty\( tail\( l\)\)\) ) p
(return) K
( l ;) p n
() S 8 T () S
(int) k
( key = minimum\( l, head\( l\)\);) p n
(        ) S
(return) K
( cons\( key, slowsort\( remove\( l, key\)\)\); ) p n
(L.java) (Page 3/5) (sept. 12, 16 15:11) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   }) p n
() N
(   ) S
(public) K
( ) p
(static) K
( ) p
(void) k
( printL\( L l\)) p n
(   { ) S
(int) k
( n=0;) p n
(     ) S
(for) K
( \(  L c=l; ! isempty\( c\) && n < 100 ; c=tail\(c\)\) ) p n
(        { System.out.print\( c.elt + ") S
(  ) str
("\); n++; }) p n
(     System.out.println\(\); }) N
() N
(   ) S
(public) K
( ) p
(static) K
( ) p
(void) k
( main \(String[] args\)) p n
(   {) N
(    {) N
(    L l= cons\( 1, cons\( 2, cons\( 3, nil\)\)\);) N
(    ) S
(for) K
( \(L c=l; c != nil; c=c.next\) System.out.print\( c.elt + ") p
(  ) str
("\);) p n
(    System.out.println\(\);) N
(    ) S
(for) K
( \(L c=l; ! isempty\( c\); c= tail\( c\)\) System.out.print\( head\(c\) + ") p
(; ) str
("\);) p n
(    System.out.println\(\);) N
(    }) N
() N
(    System.out.println\(") S
(Hello World) str
("\);) p n
(    System.out.println\(") S
(Fib\(5\)=) str
("\);) p n
(    System.out.println\( fib\(5\)\);) N
(    ) S
(for) K
(\( ) p
(int) k
( i=0; i<14; i++\)) p n
(    {) N
() S 8 T (    System.out.print\(") S
(Fib\() str
("\);) p n
() S 8 T (    System.out.print\(i\);) N
() S 8 T (    System.out.print\(") S
(\)=) str
("\);) p n
() S 8 T (    System.out.println\( fib\(i\)\);) N
(    }) N
() N
(    L l_0_10 = iaj\( 0, 10\); ) N
(    System.out.print\(") S
(map Fact \(iaj 0 10\):\\n) str
("\);) p n
(    printL\( map\( ) S
(new) K
( Fact\(\), l_0_10\)\);) p n
(    System.out.print\(") S
(map Fib \(iaj 0 10\):\\n) str
("\);) p n
(    printL\( map\( ) S
(new) K
( Fib\(\), l_0_10\)\);) p n
() N
(    { ) S
(// test de mergesort) c n
(    ) p
(int) k
( n= 5000;) p n
(    ) S
(if) K
( \(1==args.length\) n=Integer.parseInt\(args[0]\);) p n
(/*) c n
(for\( int i=0; i<args.length; i++\) ) N
({ System.out.print\("arg="\); ) N
(  System.out.print\(args[i]\);) N
(  System.out.print\("\\n"\);) N
(}) N
(*/) N
(    System.out.print\(") p
(n=) str
("\); System.out.print\( n\); System.out.print\(") p
(\\n) str
("\);) p n
() N
(    ) S
(// DM: sur ma machine, plante pour dix mille elements. Java gere mal la recu) c n
(rsion) N
(    L l= lalea2\( n\);) p n
(    System.out.print\( ") S
(\\nLa liste non triee:\\n) str
("\);) p n
(    printL\( l\);) N
() N
(    System.out.print\( ") S
(\\nLa liste triee par mergesort :\\n) str
("\);) p n
(    L l2=mergesort\( l\);) N
(    printL\( l2\);) N
() N
(    System.out.print\( ") S
(\\nLa liste triee par quicksort :\\n) str
("\);) p n
(    L l3= quicksort\( ) S
(new) K
( Croissant\(\),  l\);) p n
(    printL\( l3\);) N
() N
(    System.out.print\( ") S
(\\nLa liste triee par quicksort decroissant :\\n) str
("\);) p n
(    L l3bis= quicksort\( ) S
(new) K
( Decroissant\(\), l\);) p n
(    printL\( l3bis\);) N
() N
(    System.out.print\( ") S
(\\nLa liste triee par insertion dans 1 arbre binaire non \303\251quilibr\303\251:\\n) str
("\);) p n
(    L l4= A.treesort\( l\);) S 32 T () N
(    printL\( l4\);) N
(    System.out.print\( ") S
(\\nLa liste triee par slowsort :\\n) str
("\);) p n
(L.java) (Page 4/5) (sept. 12, 16 15:11) title
border
grestore
(Printed by dmichel) rhead
(L.java) (2/3) (lundi septembre 12, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//    if \(n<1000\) ) c n
(    printL\( slowsort\( l\)\);) p n
(    ) S
(// else System.out.print\( "\\n n trop grand\\n"\);) c n
(    }) p n
(   }) N
(}) N
() N
(L.java) (Page 5/5) (sept. 12, 16 15:11) title
border
grestore
(Printed by dmichel) rhead
(L.java) (3/3) (lundi septembre 12, 2016) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
